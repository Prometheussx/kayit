import cv2
import mediapipe as mp
import numpy as np
import time

# Kamera erişimi
cam = cv2.VideoCapture(0)
face_mesh = mp.solutions.face_mesh.FaceMesh(refine_landmarks=True)

# Kullanılacak resmin yolu
image_path = "image.jpeg"  # Replace with your image path

# Resmi yükle
image = cv2.imread(image_path)
if image is None:
    print("Error: Image could not be loaded. Check the image path.")
    exit()

# Kamera çözünürlüğünü al
_, frame = cam.read()
frame_h, frame_w, _ = frame.shape

# Resmi kamera çözünürlüğüne yeniden boyutlandır
resized_image = cv2.resize(image, (frame_w, frame_h))
blurred_image = cv2.GaussianBlur(image, (51,51), 0)

def get_eye_center(landmarks, indices, frame_w, frame_h):
    x = sum([landmarks[i].x for i in indices]) / len(indices) * frame_w
    y = sum([landmarks[i].y for i in indices]) / len(indices) * frame_h
    z = sum([landmarks[i].z for i in indices]) / len(indices)  # Z değeri normalize edilmiştir
    return int(x), int(y), z

def calculate_angle(x1, y1, x2, y2):
    # Vektörü oluştur
    dx = x2 - x1
    dy = y2 - y1
    
    # Eğimi hesapla
    angle = np.arctan2(dy, dx) * 180 / np.pi
    return angle

start_time = None  # Resmin gösterilmeye başlandığı zamanı saklar
blur_delay = 0.5  # Resmin bakmayı kestikten sonra kaç saniye net kalacağını belirler
show_image_clear = False  # Resmin net olup olmadığını belirler

while True:
    _, frame = cam.read()
    frame = cv2.flip(frame, 1)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    output = face_mesh.process(rgb_frame)
    landmark_points = output.multi_face_landmarks
    frame_h, frame_w, _ = frame.shape
    
    if landmark_points:
        landmarks = landmark_points[0].landmark
        
        # Sağ göz merkezi
        right_eye_center_x, right_eye_center_y, right_eye_center_z = get_eye_center(landmarks, range(474, 478), frame_w, frame_h)
        cv2.circle(frame, (right_eye_center_x, right_eye_center_y), 5, (0, 255, 0), -1)
        
        # Sol göz merkezi
        left_eye_center_x, left_eye_center_y, left_eye_center_z = get_eye_center(landmarks, range(469, 473), frame_w, frame_h)
        cv2.circle(frame, (left_eye_center_x, left_eye_center_y), 5, (255, 0, 0), -1)
        
        # Bakış yönü çizgisi - sağ göz
        right_eye_direction_x = right_eye_center_x - int(100 * right_eye_center_z)
        right_eye_direction_y = right_eye_center_y - int(100 * right_eye_center_z)
        cv2.line(frame, (right_eye_center_x, right_eye_center_y), (right_eye_direction_x, right_eye_direction_y), (0, 255, 0), 2)
        
        # Bakış yönü çizgisi - sol göz
        left_eye_direction_x = left_eye_center_x - int(100 * left_eye_center_z)
        left_eye_direction_y = left_eye_center_y - int(100 * left_eye_center_z)
        cv2.line(frame, (left_eye_center_x, left_eye_center_y), (left_eye_direction_x, left_eye_direction_y), (255, 0, 0), 2)
        
        # Daire merkezi ve yarıçapı
        circle_center = (frame_w // 2, frame_h // 2)
        circle_radius = 100
        cv2.circle(frame, circle_center, circle_radius, (0, 255, 255), 2)
        
        # Sağ göz çizgisinin açısını hesapla
        right_eye_angle = calculate_angle(right_eye_center_x, right_eye_center_y, right_eye_direction_x, right_eye_direction_y)
        
        # Sol göz çizgisinin açısını hesapla
        left_eye_angle = calculate_angle(left_eye_center_x, left_eye_center_y, left_eye_direction_x, left_eye_direction_y)

        # Açı aralığı kontrolü
        if abs(right_eye_angle) <= 45 and abs(left_eye_angle) <= 45:
            # Sağ ve sol gözler belirli bir açı aralığında
            cv2.putText(frame, "Inside", (circle_center[0] - 30, circle_center[1]), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            if start_time is None:
                start_time = time.time()
            show_image_clear = True  # Resmi net göster
        else:
            if show_image_clear:
                start_time = time.time()
            show_image_clear = False  # Resmi bulanık göster

    # Resmi belirli bir süre boyunca göster
    if show_image_clear or (start_time is not None and (time.time() - start_time) < blur_delay):
        display_frame = image.copy()
    else:
        display_frame = blurred_image.copy()

    cv2.imshow("Face Mesh", frame)
    cv2.imshow("Displayed Image", display_frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cam.release()
cv2.destroyAllWindows()

bunda olduğu gibi webcam frameinde bir halka olsun gözler o halkada ise ve açıları uygunsa inside yazsın